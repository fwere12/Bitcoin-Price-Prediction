#Displaying the first few rows of the training dataset
df_train.head()

#Displaying the first few rows of the test dataset
df_test.head()

#Summary statistics of the training dataset
df_train.describe()
#Summary statistics of the test dataset
df_test.describe()

#Correlation heatmap for the training dataset
numeric_df_train = df_train.select_dtypes(include=[np.number])
plt.figure(figsize=(10, 8))
sns.heatmap(numeric_df_train.corr(), annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Heatmap - Training Dataset')
plt.show()

*Time Series Analysis*
#Plotting the closing price over time for the training dataset
plt.figure(figsize=(14, 7))
plt.plot(df_train['Date'], df_train['Close'], label='Close Price')
plt.xlabel('Date')
plt.ylabel('Close Price')
plt.title('Bitcoin Close Price Over Time - Training Dataset')
plt.legend()
plt.show()

# Prepare the data for modeling
X = df_train[['Open', 'High', 'Low', 'Volume', 'Market Cap']]
y = df_train['Close']

# Handle missing values by filling with the mean
X = X.fillna(X.mean())

*Predictive Model*
#Split the data into training and testing sets
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

#Train a Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)
